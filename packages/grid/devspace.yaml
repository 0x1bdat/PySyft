version: v1beta11

vars:
  - name: CONTAINER_REGISTRY
    # value: "gcr.io/reflected-space-315806/"
    value: ""
  - name: DOCKER_IMAGE_DB
    value: postgres:12
  - name: DOCKER_IMAGE_QUEUE
    value: rabbitmq:3-management
  - name: SERVICE_NAME_DB
    value: db
  - name: SERVICE_NAME_QUEUE
    value: queue
  - name: SERVICE_NAME_BACKEND
    value: backend
  - name: SERVICE_NAME_BACKEND_STREAM
    value: backend-stream
  - name: SERVICE_NAME_BACKEND_WORKER
    value: backend-worker
  - name: SERVICE_NAME_FRONTEND
    value: frontend
  - name: SERVICE_NAME_HEADSCALE
    value: headscale
  - name: SERVICE_NAME_TAILSCALE
    value: tailscale

images:
  backend:
    image: ${CONTAINER_REGISTRY}${DOCKER_IMAGE_BACKEND}
    tags:
      - "######"
      - latest
      - "0.6.0-alpha.0"
    createPullSecret: true
    dockerfile: ./backend/backend.dockerfile
    context: ../
    build:
      buildKit: {}
  worker:
    image: ${CONTAINER_REGISTRY}${DOCKER_IMAGE_CELERYWORKER}
    tags:
      - "######"
      - latest
      - "0.6.0-alpha.0"
    createPullSecret: true
    dockerfile: ./backend/backend.dockerfile
    context: ../
    build:
      docker:
        options:
          target: "celery-worker"
      buildKit: {}
  frontend:
    image: ${CONTAINER_REGISTRY}${DOCKER_IMAGE_FRONTEND}
    tags:
      - "######"
      - latest
      - "0.6.0-alpha.0"
    createPullSecret: true
    dockerfile: ./frontend/frontend.dockerfile
    context: ./frontend
    build:
      docker:
        options:
          target: "grid-ui-development"
          buildArgs:
            NODE_TYPE: domain
            FRONTEND_ENV: development
      buildKit:
        args: ["--target", "grid-ui-development"]
  headscale:
    image: ${CONTAINER_REGISTRY}${DOCKER_IMAGE_HEADSCALE}
    tags:
      - "######"
      - latest
      - "0.6.0-alpha.0"
    createPullSecret: true
    dockerfile: ./vpn/headscale.dockerfile
    context: ./vpn
    build:
      buildKit: {}
  tailscale:
    image: ${CONTAINER_REGISTRY}${DOCKER_IMAGE_TAILSCALE}
    tags:
      - "######"
      - latest
      - "0.6.0-alpha.0"
    createPullSecret: true
    dockerfile: ./vpn/tailscale.dockerfile
    context: ./vpn
    build:
      buildKit: {}

deployments:
  - name: queue
    helm:
      componentChart: true
      values:
        containers:
          - image: ${DOCKER_IMAGE_QUEUE}
        service:
          name: ${SERVICE_NAME_QUEUE}
          ports:
            - name: ampq
              port: 5672
            - name: management
              port: 15672
  - name: db
    helm:
      componentChart: true
      values:
        containers:
          - image: ${DOCKER_IMAGE_DB}
            env:
              - name: POSTGRES_DB
                value: ${POSTGRES_DB}
              - name: POSTGRES_USER
                value: ${POSTGRES_USER}
              - name: POSTGRES_PASSWORD
                value: ${POSTGRES_PASSWORD}
              - name: PGDATA
                value: /var/lib/postgresql/data/pgdata
            volumeMounts:
              - containerPath: /var/lib/postgresql/data/pgdata
                volume:
                  name: app-db-data
                  subPath: /
                  readOnly: false
        volumes:
          - name: app-db-data
            size: "5Gi"
        service:
          name: ${SERVICE_NAME_DB}
          ports:
            - port: 5432
  - name: backend
    helm:
      componentChart: true
      values:
        containers:
          - image: ${CONTAINER_REGISTRY}${DOCKER_IMAGE_BACKEND}
            command:
              - /start-reload.sh
            env:
              - name: SYFT_USE_UVLOOP
                value: "0"
              - name: DOMAIN_NAME
                value: ${DOMAIN_NAME}
              - name: POSTGRES_SERVER
                value: ${SERVICE_NAME_DB}
              - name: POSTGRES_DB
                value: ${POSTGRES_DB}
              - name: POSTGRES_USER
                value: ${POSTGRES_USER}
              - name: POSTGRES_PASSWORD
                value: ${POSTGRES_PASSWORD}
              - name: VERSION
                value: ${VERSION}
              - name: VERSION_HASH
                value: ${VERSION_HASH}
              - name: SERVER_NAME
                value: ${DOMAIN}
              - name: SERVER_HOST
                value: ${SERVER_HOST}
              - name: LOG_LEVEL
                value: debug
        service:
          name: ${SERVICE_NAME_BACKEND}
          ports:
            - port: 80
  - name: backend-stream
    helm:
      componentChart: true
      values:
        containers:
          - image: ${CONTAINER_REGISTRY}${DOCKER_IMAGE_BACKEND}
            command:
              - waitforit
            args:
              [
                "-address=http://backend:80/api/v1/syft/metadata",
                "-status=200",
                "-timeout=600",
                "--",
                "/start-reload.sh",
              ]
            env:
              - name: SYFT_USE_UVLOOP
                value: "0"
              - name: DOMAIN_NAME
                value: ${DOMAIN_NAME}
              - name: POSTGRES_SERVER
                value: ${SERVICE_NAME_DB}
              - name: POSTGRES_DB
                value: ${POSTGRES_DB}
              - name: POSTGRES_USER
                value: ${POSTGRES_USER}
              - name: POSTGRES_PASSWORD
                value: ${POSTGRES_PASSWORD}
              - name: VERSION
                value: ${VERSION}
              - name: VERSION_HASH
                value: ${VERSION_HASH}
              - name: SERVER_NAME
                value: ${DOMAIN}
              - name: SERVER_HOST
                value: ${SERVER_HOST}
              - name: LOG_LEVEL
                value: debug
              - name: STREAM_QUEUE
                value: "1"
        service:
          name: ${SERVICE_NAME_BACKEND_STREAM}
          ports:
            - port: 80
  - name: backend-worker
    helm:
      componentChart: true
      values:
        containers:
          - image: ${CONTAINER_REGISTRY}${DOCKER_IMAGE_CELERYWORKER}
            command:
              - waitforit
            args:
              [
                "-address=http://backend:80/api/v1/syft/metadata",
                "-status=200",
                "-timeout=600",
                "--",
                "/worker-start.sh",
              ]
            env:
              - name: SYFT_USE_UVLOOP
                value: "0"
              - name: DOMAIN_NAME
                value: ${DOMAIN_NAME}
              - name: POSTGRES_SERVER
                value: ${SERVICE_NAME_DB}
              - name: POSTGRES_DB
                value: ${POSTGRES_DB}
              - name: POSTGRES_USER
                value: ${POSTGRES_USER}
              - name: POSTGRES_PASSWORD
                value: ${POSTGRES_PASSWORD}
              - name: VERSION
                value: ${VERSION}
              - name: VERSION_HASH
                value: ${VERSION_HASH}
              - name: SERVER_NAME
                value: ${DOMAIN}
              - name: SERVER_HOST
                value: ${SERVER_HOST}
              - name: CELERY_WORKER
                value: "true"
              - name: RUN
                value: "celery worker -A grid.worker -l info -Q main-queue -c 1"
  - name: frontend
    helm:
      componentChart: true
      values:
        containers:
          - image: ${CONTAINER_REGISTRY}${DOCKER_IMAGE_FRONTEND}
            env:
              - name: VERSION
                value: ${VERSION}
              - name: VERSION_HASH
                value: ${VERSION_HASH}
        service:
          name: ${SERVICE_NAME_FRONTEND}
          ports:
            - port: 80
  - name: headscale
    helm:
      componentChart: true
      values:
        containers:
          - image: ${CONTAINER_REGISTRY}${DOCKER_IMAGE_HEADSCALE}
            env:
              - name: NETWORK_NAME
                value: ${NETWORK_NAME}
            volumeMounts:
              - containerPath: /headscale/data
                volume:
                  name: headscale-data
                  subPath: /
                  readOnly: false
        volumes:
          - name: headscale-data
            size: "100Mi"
        service:
          name: ${SERVICE_NAME_HEADSCALE}
          ports:
            - name: vpn
              port: 8080
            - name: api
              port: 4000
  - name: tailscale
    helm:
      componentChart: true
      values:
        containers:
          - image: ${CONTAINER_REGISTRY}${DOCKER_IMAGE_TAILSCALE}
            securityContext:
              capabilities:
                add: ["NET_ADMIN", "SYS_MODULE"]
              privileged: true
            env:
              - name: HOSTNAME
                value: ${DOMAIN_NAME}
            volumeMounts:
              - containerPath: /var/lib/tailscale
                volume:
                  name: tailscale-data
                  subPath: /
                  readOnly: false
        volumes:
          - name: tailscale-data
            size: "100Mi"
        service:
          name: ${SERVICE_NAME_TAILSCALE}
          ports:
            - name: api
              port: 4000
  - name: stack-ingress
    kubectl:
      manifests:
        - k8s/manifests/ingress.yaml

dev:
  ports:
    # - name: backend
    #   labelSelector:
    #     app.kubernetes.io/component: ${SERVICE_NAME_BACKEND}
    #   forward:
    #     - port: 8082
    #       remotePort: 80
    # - name: backend-stream
    #   labelSelector:
    #     app.kubernetes.io/component: ${SERVICE_NAME_BACKEND_STREAM}
    #   forward:
    #     - port: 8083
    #       remotePort: 80
    # - name: db
    #   labelSelector:
    #     app.kubernetes.io/component: ${SERVICE_NAME_DB}
    #   forward:
    #     - port: 5432
    #       remotePort: 5432
    # - name: queue
    #   labelSelector:
    #     app.kubernetes.io/component: ${SERVICE_NAME_QUEUE}
    #   forward:
    #     - port: 15672
    # - name: frontend
    #   labelSelector:
    #     app.kubernetes.io/component: ${SERVICE_NAME_FRONTEND}
    #   forward:
    #     - port: 8085
    #       remotePort: 80
    # - name: headscale
    #   labelSelector:
    #     app.kubernetes.io/component: ${SERVICE_NAME_HEADSCALE}
    #   forward:
    #     - port: 8086
    #       remotePort: 8080
    - name: headscale-api
      labelSelector:
        app.kubernetes.io/component: ${SERVICE_NAME_HEADSCALE}
      forward:
        - port: 8087
          remotePort: 4000
    - name: tailscale-api
      labelSelector:
        app.kubernetes.io/component: ${SERVICE_NAME_TAILSCALE}
      forward:
        - port: 8088
          remotePort: 4000

  sync:
    - name: backendsyft
      disableDownload: true
      labelSelector:
        app.kubernetes.io/component: ${SERVICE_NAME_BACKEND}
      localSubPath: ../syft
      containerPath: /app/syft
      excludePaths: ["../syft/examples", "../syft/tests"]
    - name: backendapp
      disableDownload: true
      labelSelector:
        app.kubernetes.io/component: ${SERVICE_NAME_BACKEND}
      localSubPath: ./backend/grid
      containerPath: /app/grid
      excludePaths: []
    - name: backendcache
      labelSelector:
        app.kubernetes.io/component: ${SERVICE_NAME_BACKEND}
      localSubPath: ./data/package-cache
      containerPath: /root/.cache
      excludePaths: []
    - name: backend-streamsyft
      disableDownload: true
      labelSelector:
        app.kubernetes.io/component: ${SERVICE_NAME_BACKEND_STREAM}
      localSubPath: ../syft
      containerPath: /app/syft
      excludePaths: ["../syft/examples", "../syft/tests"]
    - name: backend-streamapp
      disableDownload: true
      labelSelector:
        app.kubernetes.io/component: ${SERVICE_NAME_BACKEND_STREAM}
      localSubPath: ./backend/grid
      containerPath: /app/grid
      excludePaths: []
    - name: backend-streamcache
      labelSelector:
        app.kubernetes.io/component: ${SERVICE_NAME_BACKEND_STREAM}
      localSubPath: ./data/package-cache
      containerPath: /root/.cache
      excludePaths: []
    - name: backend-workersyft
      disableDownload: true
      labelSelector:
        app.kubernetes.io/component: ${SERVICE_NAME_BACKEND_WORKER}
      localSubPath: ../syft
      containerPath: /app/syft
      excludePaths: ["../syft/examples", "../syft/tests"]
    - name: backend-workerapp
      disableDownload: true
      labelSelector:
        app.kubernetes.io/component: ${SERVICE_NAME_BACKEND_WORKER}
      localSubPath: ./backend/grid
      containerPath: /app/grid
      excludePaths: []
    - name: backend-workercache
      labelSelector:
        app.kubernetes.io/component: ${SERVICE_NAME_BACKEND_WORKER}
      localSubPath: ./data/package-cache
      containerPath: /root/.cache
      excludePaths: []
    - name: frontend
      disableDownload: true
      labelSelector:
        app.kubernetes.io/component: ${SERVICE_NAME_FRONTEND}
      localSubPath: ./frontend/src
      containerPath: /app/src
      excludePaths: []
# `dev.terminal` tells DevSpace to open a terminal as a last step during `devspace dev`
# terminal:
#   imageSelector: ${DOCKER_IMAGE_BACKEND} # Select the Pod that runs our `${IMAGE}`
#   # With this optional `command` we can tell DevSpace to run a script when opening the terminal
#   # This is often useful to display help info for new users or perform initial tasks (e.g. installing dependencies)
#   # DevSpace has generated an example ./devspace_start.sh file in your local project - Feel free to customize it!
#   command: ["bash"]
# `profiles` lets you modify the config above for different environments (e.g. dev vs production)
# profiles:
#   # This profile is called `production` and you can use it for example using: devspace deploy -p production
#   # We generally recommend to use the base config without any profiles as optimized for development (e.g. image build+push is disabled)
#   - name: production
#     # This profile adds our image to the config so that DevSpace will build, tag and push our image before the deployment
#     merge:
#       images:
#         app:
#           image: ${IMAGE} # Use the value of our `${IMAGE}` variable here (see vars above)
#           dockerfile: ./packages/grid/backend/backend.dockerfile
#           context: packages/grid/backend/
