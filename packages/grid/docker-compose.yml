version: "3.8"
services:
  proxy:
    restart: always
    image: traefik:v2.4
    networks:
      - "${TRAEFIK_PUBLIC_NETWORK?Variable not set}"
      - default
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    command:
      # Entrypoint web is for HTTP
      - --entryPoints.web.address=:80
      # Enable Docker in Traefik, so that it reads labels from Docker services
      - --providers.docker
      # Add a constraint to only use services with the label for this stack
      # from the env var TRAEFIK_TAG
      - --providers.docker.constraints=Label(`traefik.constraint-label-stack`, `${TRAEFIK_TAG?Variable not set}`)
      # Do not expose all Docker services, only the ones explicitly exposed
      - --providers.docker.exposedbydefault=false
      # Enable Docker Swarm mode
      - --providers.docker.swarmmode
      # Enable the access log, with HTTP requests
      - --accesslog
      # Enable the Traefik log, for configurations and errors
      - --log
      # Enable the Dashboard and API
      - --api
    deploy:
      placement:
        constraints:
          - node.role == manager
      labels:
        # Enable Traefik for this service, to make it available in the public network
        - traefik.enable=true
        # Use the traefik-public network (declared below)
        - traefik.docker.network=${TRAEFIK_PUBLIC_NETWORK?Variable not set}
        # Use the custom label "traefik.constraint-label=traefik-public"
        # This public Traefik will only use services with this label
        - traefik.constraint-label=${TRAEFIK_PUBLIC_TAG?Variable not set}
        # Define the port inside of the Docker service to use
        - traefik.http.services.${STACK_NAME?Variable not set}-proxy.loadbalancer.server.port=80
        # Redirect all www to non-www on web (HTTP)
        - "traefik.http.routers.www-catchall.entrypoints=web"
        - "traefik.http.routers.www-catchall.rule=HostRegexp(`{host:(www\\.).+}`)"
        - "traefik.http.routers.www-catchall.tls=true"
        - "traefik.http.routers.www-catchall.middlewares=wwwtohttp"
        - "traefik.http.middlewares.wwwtohttp.redirectregex.regex=^http?://(?:www\\.)?(.+)"
        - "traefik.http.middlewares.wwwtohttp.redirectregex.replacement=http://$${1}"
        - "traefik.http.middlewares.wwwtohttp.redirectregex.permanent=false"

  db:
    restart: always
    image: postgres:12
    volumes:
      - app-db-data:/var/lib/postgresql/data
    env_file:
      - .env
    deploy:
      placement:
        constraints:
          - node.labels.${STACK_NAME?Variable not set}.app-db-data == true

  queue:
    restart: always
    image: rabbitmq:3
    # Using the below image instead is required to enable the "Broker" tab in the flower UI:
    # image: rabbitmq:3-management
    #

  backend:
    restart: always
    image: "${DOCKER_IMAGE_BACKEND?Variable not set}:${VERSION-latest}"
    depends_on:
      - db
    env_file:
      - .env
    environment:
      - VERSION=${VERSION}
      - VERSION_HASH=${VERSION_HASH}
      - SERVER_NAME=${DOMAIN?Variable not set}
      - SERVER_HOST=https://${DOMAIN?Variable not set}
      # Allow explicit env var override for tests
      - SMTP_HOST=${SMTP_HOST}
    build:
      context: ../
      dockerfile: ./grid/backend/backend.dockerfile
      target: "backend"
    deploy:
      labels:
        - traefik.enable=true
        - traefik.constraint-label-stack=${TRAEFIK_TAG?Variable not set}
        - traefik.http.routers.${STACK_NAME?Variable not set}-backend-http.rule=PathPrefix(`/api`) || PathPrefix(`/docs`) || PathPrefix(`/redoc`) # WARNING: this wont match /api/v1/syft/stream because of length
        - traefik.http.routers.${STACK_NAME?Variable not set}-backend-http.entrypoints=web
        - traefik.http.services.${STACK_NAME?Variable not set}-backend.loadbalancer.server.port=80

  backend_stream:
    restart: always
    image: "${DOCKER_IMAGE_BACKEND?Variable not set}:${VERSION-latest}"
    depends_on:
      - db
      - backend
    env_file:
      - .env
    environment:
      - VERSION=${VERSION}
      - VERSION_HASH=${VERSION_HASH}
      - SERVER_NAME=${DOMAIN?Variable not set}
      - SERVER_HOST=https://${DOMAIN?Variable not set}
      # Allow explicit env var override for tests
      - SMTP_HOST=${SMTP_HOST}
    command: "waitforit -address=http://backend:80/api/v1/syft/metadata -status=200 -timeout=600 -- /start.sh"
    build:
      context: ../
      dockerfile: ./grid/backend/backend.dockerfile
      target: "backend"
    deploy:
      labels:
        - traefik.enable=true
        - traefik.constraint-label-stack=${TRAEFIK_TAG?Variable not set}
        - traefik.http.routers.${STACK_NAME?Variable not set}-backend-stream-http.rule=PathPrefix(`/api`) && PathPrefix(`/api/v1/syft/stream`) || PathPrefix(`/docs`) || PathPrefix(`/redoc`) # WARNING: this only matches /api/v1/syft/stream because of length
        - traefik.http.routers.${STACK_NAME?Variable not set}-backend-stream-http.entrypoints=web
        - traefik.http.services.${STACK_NAME?Variable not set}-backend-stream.loadbalancer.server.port=80

  celeryworker:
    restart: always
    image: "${DOCKER_IMAGE_BACKEND?Variable not set}:${VERSION-latest}"
    depends_on:
      - db
      - queue
    env_file:
      - .env
    environment:
      - VERSION=${VERSION}
      - VERSION_HASH=${VERSION_HASH}
      - SERVER_NAME=${DOMAIN?Variable not set}
      - SERVER_HOST=https://${DOMAIN?Variable not set}
      # Allow explicit env var override for tests
      - SMTP_HOST=${SMTP_HOST?Variable not set}
      - CELERY_WORKER=true
    build:
      context: ../
      dockerfile: ./grid/backend/backend.dockerfile
      target: "backend"

  frontend:
    restart: always
    image: "${DOCKER_IMAGE_FRONTEND?Variable not set}:${VERSION-latest}"
    build:
      context: ./frontend
      dockerfile: frontend.dockerfile
      target: "grid-ui-${FRONTEND_ENV-development}"
    environment:
      - VERSION=${VERSION}
      - VERSION_HASH=${VERSION_HASH}
    deploy:
      labels:
        - traefik.enable=true
        - traefik.constraint-label-stack=${TRAEFIK_TAG?Variable not set}
        - traefik.http.routers.${STACK_NAME?Variable not set}-frontend-http.rule=PathPrefix(`/`)
        - traefik.http.routers.${STACK_NAME?Variable not set}-frontend-http.entrypoints=web
        - traefik.http.services.${STACK_NAME?Variable not set}-frontend.loadbalancer.server.port=80

volumes:
  app-db-data:

networks:
  traefik-public:
    # Allow setting it to false for testing
    external: ${TRAEFIK_PUBLIC_NETWORK_IS_EXTERNAL-true}
