# third party
import numpy as np
import torch

# syft absolute
import syft as sy
from syft.core.tensor.mpc_tensor import MPCTensor
from syft.core.tensor.tensor import Tensor

vms = [
    sy.VirtualMachine(name=name) for name in ["alice", "bob", "tudor", "theo", "andrew"]
]
clients = [vm.get_client() for vm in vms]

# One of the clients hold the secret
remote_value = clients[0].syft.core.tensor.tensor.Tensor(np.array([1, 2, 3, 4, -5]))

# TODO: Ideally those should be generated by each party:
# One party generates 1 seed and sends this seed to the next party (ring like formation)
# In this way each party would have 2 seeds (one generated by them, one received from the previous party)

# P_1 holds: G_1, G_N
# P_2 holds: G_2, G_1
# P_3 holds: G_3, G_2
# ...
# P_N holds: G_N, G_N-1
#
# Pseudo Random Zero Share
# Each party generates a share using the initialized generators in the following way:
# Share_P_1 = G_1 - G_N
# Share_P_2 = G_2 - G_1
# ...
# Share_P_N = G_N - G_N-1
# When those shares are added they would give back 0
seeds_przs_generators = [32, 32, 53, 23, 123]
mpc_tensor = MPCTensor(
    parties=clients,
    secret=remote_value,
    shape=(1, 5),
    seeds_przs_generators=seeds_przs_generators,
)
print(mpc_tensor)


print("Reconstructed Value", mpc_tensor.reconstruct())
