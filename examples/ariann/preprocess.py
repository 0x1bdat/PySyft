import time

import torch as th
import syft as sy

# fmt: off
config_zoo = {
    "network1-mnist": {
        'fss_eq': [128],
        'fss_comp': [16384, 16384, 1280, 11520, 1280],
        'mul': [((128, 128), (128, 128)), ((128, 128), (128, 128)), ((128, 10), (128, 10))],
        'matmul': [((128, 784), (784, 128)), ((128, 128), (128, 128)), ((128, 128), (128, 10))]
    },
    "network2-mnist": {
        'fss_eq': [128],
        'fss_comp': [589824, 294912, 294912, 65536, 32768, 32768, 12800, 1280, 11520, 1280],
        'mul': [((128, 16, 144, 2), (128, 16, 144, 2)), ((128, 16, 144, 1), (128, 16, 144, 1)), ((128, 16, 12, 12), (128, 16, 12, 12)), ((128, 16, 16, 2), (128, 16, 16, 2)), ((128, 16, 16, 1), (128, 16, 16, 1)), ((128, 16, 4, 4), (128, 16, 4, 4)), ((128, 100), (128, 100)), ((128, 10), (128, 10))],
        'matmul': [((128, 576, 25), (25, 16)), ((128, 64, 400), (400, 16)), ((128, 256), (256, 100)), ((128, 100), (100, 10))]
    },
    "resnet18-hymenoptera": {
        'fss_eq': [1],
        'fss_comp': [802816, 401408, 200704, 200704, 200704, 200704, 200704, 200704, 200704, 100352, 100352, 100352, 100352, 50176, 50176, 50176, 50176, 25088, 25088, 25088, 25088, 2, 2],
        'mul': [((64,), (12544, 64)), ((12544, 64), (64,)), ((1, 64, 3136, 4), (1, 64, 3136, 4)), ((1, 64, 3136, 2), (1, 64, 3136, 2)), ((1, 64, 3136, 1), (1, 64, 3136, 1)), ((1, 64, 3136, 1), (1, 64, 3136, 1)), ((1, 64, 56, 56), (1, 64, 56, 56)), ((64,), (3136, 64)), ((3136, 64), (64,)), ((1, 64, 56, 56), (1, 64, 56, 56)), ((64,), (3136, 64)), ((3136, 64), (64,)), ((1, 64, 56, 56), (1, 64, 56, 56)), ((64,), (3136, 64)), ((3136, 64), (64,)), ((1, 64, 56, 56), (1, 64, 56, 56)), ((64,), (3136, 64)), ((3136, 64), (64,)), ((1, 64, 56, 56), (1, 64, 56, 56)), ((128,), (784, 128)), ((784, 128), (128,)), ((1, 128, 28, 28), (1, 128, 28, 28)), ((128,), (784, 128)), ((784, 128), (128,)), ((128,), (784, 128)), ((784, 128), (128,)), ((1, 128, 28, 28), (1, 128, 28, 28)), ((128,), (784, 128)), ((784, 128), (128,)), ((1, 128, 28, 28), (1, 128, 28, 28)), ((128,), (784, 128)), ((784, 128), (128,)), ((1, 128, 28, 28), (1, 128, 28, 28)), ((256,), (196, 256)), ((196, 256), (256,)), ((1, 256, 14, 14), (1, 256, 14, 14)), ((256,), (196, 256)), ((196, 256), (256,)), ((256,), (196, 256)), ((196, 256), (256,)), ((1, 256, 14, 14), (1, 256, 14, 14)), ((256,), (196, 256)), ((196, 256), (256,)), ((1, 256, 14, 14), (1, 256, 14, 14)), ((256,), (196, 256)), ((196, 256), (256,)), ((1, 256, 14, 14), (1, 256, 14, 14)), ((512,), (49, 512)), ((49, 512), (512,)), ((1, 512, 7, 7), (1, 512, 7, 7)), ((512,), (49, 512)), ((49, 512), (512,)), ((512,), (49, 512)), ((49, 512), (512,)), ((1, 512, 7, 7), (1, 512, 7, 7)), ((512,), (49, 512)), ((49, 512), (512,)), ((1, 512, 7, 7), (1, 512, 7, 7)), ((512,), (49, 512)), ((49, 512), (512,)), ((1, 512, 7, 7), (1, 512, 7, 7))],
        'matmul': [((1, 12544, 147), (147, 64)), ((1, 3136, 576), (576, 64)), ((1, 3136, 576), (576, 64)), ((1, 3136, 576), (576, 64)), ((1, 3136, 576), (576, 64)), ((1, 784, 576), (576, 128)), ((1, 784, 1152), (1152, 128)), ((1, 784, 64), (64, 128)), ((1, 784, 1152), (1152, 128)), ((1, 784, 1152), (1152, 128)), ((1, 196, 1152), (1152, 256)), ((1, 196, 2304), (2304, 256)), ((1, 196, 128), (128, 256)), ((1, 196, 2304), (2304, 256)), ((1, 196, 2304), (2304, 256)), ((1, 49, 2304), (2304, 512)), ((1, 49, 4608), (4608, 512)), ((1, 49, 256), (256, 512)), ((1, 49, 4608), (4608, 512)), ((1, 49, 4608), (4608, 512)), ((1, 512), (512, 2))]
    },
    "vgg16-cifar10": {
        'fss_eq': [1],
        'fss_comp': [65536, 32768, 16384, 16384, 32768, 16384, 8192, 8192, 16384, 16384, 8192, 4096, 4096, 8192, 8192, 4096, 2048, 2048, 2048, 2048, 1024, 512, 512, 4096, 4096, 90, 10],
        'mul': [((1, 64, 32, 32), (1, 64, 32, 32)), ((1, 64, 256, 2), (1, 64, 256, 2)), ((1, 64, 256, 1), (1, 64, 256, 1)), ((1, 64, 16, 16), (1, 64, 16, 16)), ((1, 128, 16, 16), (1, 128, 16, 16)), ((1, 128, 64, 2), (1, 128, 64, 2)), ((1, 128, 64, 1), (1, 128, 64, 1)), ((1, 128, 8, 8), (1, 128, 8, 8)), ((1, 256, 8, 8), (1, 256, 8, 8)), ((1, 256, 8, 8), (1, 256, 8, 8)), ((1, 256, 16, 2), (1, 256, 16, 2)), ((1, 256, 16, 1), (1, 256, 16, 1)), ((1, 256, 4, 4), (1, 256, 4, 4)), ((1, 512, 4, 4), (1, 512, 4, 4)), ((1, 512, 4, 4), (1, 512, 4, 4)), ((1, 512, 4, 2), (1, 512, 4, 2)), ((1, 512, 4, 1), (1, 512, 4, 1)), ((1, 512, 2, 2), (1, 512, 2, 2)), ((1, 512, 2, 2), (1, 512, 2, 2)), ((1, 512, 2, 2), (1, 512, 2, 2)), ((1, 512, 1, 2), (1, 512, 1, 2)), ((1, 512, 1, 1), (1, 512, 1, 1)), ((1, 512, 1, 1), (1, 512, 1, 1)), ((1, 4096), (1, 4096)), ((1, 4096), (1, 4096))],
        'matmul': [((1, 1024, 27), (27, 64)), ((1, 1024, 576), (576, 64)), ((1, 256, 576), (576, 128)), ((1, 256, 1152), (1152, 128)), ((1, 64, 1152), (1152, 256)), ((1, 64, 2304), (2304, 256)), ((1, 64, 2304), (2304, 256)), ((1, 16, 2304), (2304, 512)), ((1, 16, 4608), (4608, 512)), ((1, 16, 4608), (4608, 512)), ((1, 4, 4608), (4608, 512)), ((1, 4, 4608), (4608, 512)), ((1, 4, 4608), (4608, 512)), ((1, 512), (512, 4096)), ((1, 4096), (4096, 4096)), ((1, 4096), (4096, 10))],
    },
    "vgg16-tiny-imagenet": {
        'fss_eq': [1],
        'fss_comp': [262144, 131072, 65536, 65536, 131072, 65536, 32768, 32768, 65536, 65536, 32768, 16384, 16384, 32768, 32768, 16384, 8192, 8192, 8192, 8192, 4096, 2048, 2048, 4096, 4096, 39800, 200],
        'mul': [((1, 64, 64, 64), (1, 64, 64, 64)), ((1, 64, 1024, 2), (1, 64, 1024, 2)), ((1, 64, 1024, 1), (1, 64, 1024, 1)), ((1, 64, 32, 32), (1, 64, 32, 32)), ((1, 128, 32, 32), (1, 128, 32, 32)), ((1, 128, 256, 2), (1, 128, 256, 2)), ((1, 128, 256, 1), (1, 128, 256, 1)), ((1, 128, 16, 16), (1, 128, 16, 16)), ((1, 256, 16, 16), (1, 256, 16, 16)), ((1, 256, 16, 16), (1, 256, 16, 16)), ((1, 256, 64, 2), (1, 256, 64, 2)), ((1, 256, 64, 1), (1, 256, 64, 1)), ((1, 256, 8, 8), (1, 256, 8, 8)), ((1, 512, 8, 8), (1, 512, 8, 8)), ((1, 512, 8, 8), (1, 512, 8, 8)), ((1, 512, 16, 2), (1, 512, 16, 2)), ((1, 512, 16, 1), (1, 512, 16, 1)), ((1, 512, 4, 4), (1, 512, 4, 4)), ((1, 512, 4, 4), (1, 512, 4, 4)), ((1, 512, 4, 4), (1, 512, 4, 4)), ((1, 512, 4, 2), (1, 512, 4, 2)), ((1, 512, 4, 1), (1, 512, 4, 1)), ((1, 512, 2, 2), (1, 512, 2, 2)), ((1, 4096), (1, 4096)), ((1, 4096), (1, 4096))],
        'matmul': [((1, 4096, 27), (27, 64)), ((1, 4096, 576), (576, 64)), ((1, 1024, 576), (576, 128)), ((1, 1024, 1152), (1152, 128)), ((1, 256, 1152), (1152, 256)), ((1, 256, 2304), (2304, 256)), ((1, 256, 2304), (2304, 256)), ((1, 64, 2304), (2304, 512)), ((1, 64, 4608), (4608, 512)), ((1, 64, 4608), (4608, 512)), ((1, 16, 4608), (4608, 512)), ((1, 16, 4608), (4608, 512)), ((1, 16, 4608), (4608, 512)), ((1, 2048), (2048, 4096)), ((1, 4096), (4096, 4096)), ((1, 4096), (4096, 200))],
    }
}
# fmt: on


def build_prepocessing(model, dataset, workers, args):
    start_time = time.time()

    try:
        config = config_zoo[f"{model}-{dataset}"]
    except KeyError:
        if args.verbose:
            print(f"WARNING: No preprocessing found for {model}-{dataset}")
        return 0

    if args.verbose:
        print("Preprocess")

    for op in ["fss_eq", "fss_comp"]:
        n_instances_list = config[op]
        for n_instances in n_instances_list:
            if args.verbose:
                print(f"{op} n_instances", n_instances)
            sy.local_worker.crypto_store.provide_primitives(
                op=op, workers=workers, n_instances=n_instances
            )

    for op in ["mul", "matmul"]:
        if args.dtype == "int":
            torch_dtype = th.int32
            field = 2 ** 32
        elif args.dtype == "long":
            torch_dtype = th.int64
            field = 2 ** 64
        else:
            raise ValueError(f"Unsupported dtype {args.dtype}")

        shapes = config[op]
        if args.verbose:
            print(f"{op} shapes", shapes)
        sy.local_worker.crypto_store.provide_primitives(
            op=op,
            workers=workers,
            n_instances=1,
            shapes=shapes,
            dtype=args.dtype,
            torch_dtype=torch_dtype,
            field=field,
        )

    preprocess_time = time.time() - start_time
    if args.verbose:
        print(
            "...", preprocess_time, "s", "[time per item=", preprocess_time / args.batch_size, "]"
        )
    else:
        print("Preprocessing time (s):\t", round(preprocess_time / args.batch_size, 4))
    return preprocess_time
